//-*- java -*-
using UnityEngine; 

using ClipperLib; 

using System.Collections.Generic; //just for List<T>

public class PolygonClipperTest : MonoBehaviour{

    public Material material; 
    public PolygonCollider2D ourPolygon; 

    private Mesh mesh; 

    public PolygonCollider2D test; 


    //Assuming explosionPoints centered on 0,0 
    public void ExplosionCut(Vector2[] cutVertices, Vector2 worldHitPoint, ClipType clipType = ClipType.ctUnion){

	PolyClipper.OffsetVertices( cutVertices, 
	  PolyClipper.GetOffset((Vector2)gameObject.transform.position,
				worldHitPoint));

	Vector2[] ourVertices = ourPolygon.points; 

	//  public enum ClipType { ctIntersection, ctUnion, ctDifference, ctXor };
	List<Vector2[]> cutPolygons = PolyClipper.ClipPoly(ourVertices,cutVertices,clipType); 

	if(cutPolygons.Count == 0){
	    Destroy(this.gameObject);
	    return; 
	}

	UpdateShape( cutPolygons[0] ); 

	for(int i = 1; i<cutPolygons.Count; i++){
	    CreateCopy( cutPolygons[i] ); 
	}
	
    }

    // MANAGING POLY CUTS and SHAPE REGENERATION =============================

    //Create a new instance of this GameObject with "points" 
    private void CreateCopy(Vector2[] points){
	GameObject newCopy = Instantiate(this.gameObject,this.gameObject.transform.position, this.gameObject.transform.rotation) as GameObject; 
	newCopy.GetComponent<PolygonClipperTest>().UpdateShape(points); 
    }

    private void UpdateShape(Vector2[] newPoints){

	// Use the triangulator to get indices for creating triangles
        Triangulator tr = new Triangulator(newPoints);
        int[] indices = tr.Triangulate();

	//Create the new PolygonCollider2D
	ourPolygon.SetPath(0,newPoints); 

        // Create the Vector3 vertices
        Vector3[] vertices = new Vector3[newPoints.Length];
        for (int i=0; i<vertices.Length; i++) {
            vertices[i] = new Vector3(newPoints[i].x, newPoints[i].y, 0);
        }

        // Create the New Mesh 
	this.mesh = new Mesh();
        mesh.vertices = vertices;
        mesh.triangles = indices;
        mesh.RecalculateNormals();
        mesh.RecalculateBounds();
 
        // Set up game object with mesh;
	if(GetComponent<MeshRenderer>()==null)
	    gameObject.AddComponent(typeof(MeshRenderer));
	if(GetComponent<MeshFilter>()==null)
	    gameObject.AddComponent(typeof(MeshFilter)); 
	
	MeshFilter filter = GetComponent<MeshFilter>() as MeshFilter; 
        filter.mesh = this.mesh;
	MeshRenderer mRenderer = GetComponent<MeshRenderer>() as MeshRenderer;
	mRenderer.material = this.material; 
    }

    void Start(){
	UpdateShape(ourPolygon.points); 

	if(test!=null)
	    ExplosionCut(test.points,gameObject.transform.position,ClipType.ctDifference); 
    }

    /*
    //Test Behavior 
    void Start(){
	Vector2[] otherVertices2D = cutObject.GetComponent<PolygonCollider2D>().points; 
	ExplosionCut( otherVertices2D,
		      cutObject.transform.position ); 
	Destroy(cutObject); 
	}
    */

}
